rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =============================================
    // HELPER FUNCTIONS
    // =============================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is a platform admin
    function isAdmin() {
      return request.auth.token.admin == true;
    }
    
    // Check if user is an enterprise employer
    function isEnterprise() {
      return request.auth.token.enterprise == true;
    }
    
    // Check if user is an employer (regular or enterprise)
    function isEmployer() {
      return request.auth.token.role == 'employer';
    }
    
    // Check if user is a job seeker
    function isJobSeeker() {
      return request.auth.token.role == 'jobseeker';
    }
    
    // Check if user is admin of a specific company
    function isCompanyAdmin(companyId) {
      return exists(/databases/$(database)/documents/companies/$(companyId)/admins/$(request.auth.uid));
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if user can access company data
    function canAccessCompany(companyId) {
      return isAdmin() || 
             (isEmployer() && (
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId ||
               isCompanyAdmin(companyId)
             ));
    }
    
    // Check if user can manage job applications for a specific job
    function canManageJobApplications(jobData) {
      return isAdmin() || 
             (isEmployer() && canAccessCompany(jobData.companyId));
    }
    
    // Validate required fields for data integrity
    function hasValidUserFields() {
      return request.resource.data.keys().hasAll(['email', 'role', 'createdAt', 'updatedAt']) &&
             request.resource.data.role in ['jobseeker', 'employer', 'admin'];
    }
    
    function hasValidJobFields() {
      return request.resource.data.keys().hasAll(['title', 'companyId', 'createdAt', 'updatedAt', 'status']) &&
             request.resource.data.status in ['active', 'inactive', 'closed'];
    }
    
    // =============================================
    // USER COLLECTION
    // =============================================
    match /users/{userId} {
      // Users can read their own profile
      // Employers can read job seekers' basic info (not full CV)
      // Admins can read all users
      allow read: if isAuthenticated() && (
        isOwner(userId) || 
        isAdmin() ||
        (isEmployer() && isJobSeeker() == false) // Employers can see other employers but not full jobseeker profiles
      );
      
      // Users can only create/update their own profile
      // Admins can create/update any user
      allow create: if isAuthenticated() && (
        (isOwner(userId) && hasValidUserFields()) ||
        isAdmin()
      );
      
      allow update: if isAuthenticated() && (
        (isOwner(userId) && hasValidUserFields()) ||
        isAdmin()
      );
      
      // Only admins can delete users (POPIA compliance - right to be forgotten)
      allow delete: if isAdmin();
      
      // CV subcollection - highly sensitive data
      match /cv/{cvId} {
        allow read: if isOwner(userId) || isAdmin();
        allow write: if isOwner(userId) || isAdmin();
        allow delete: if isOwner(userId) || isAdmin();
      }
      
      // User consents for POPIA compliance
      match /consents/{consentId} {
        allow read: if isOwner(userId) || isAdmin();
        allow write: if isOwner(userId) || isAdmin();
        // Consents should not be deleted, only updated with withdrawal timestamps
      }
      
      // User activity logs (admin only for analytics)
      match /activity/{activityId} {
        allow read: if isAdmin();
        allow write: if isAdmin();
      }
    }
    
    // =============================================
    // COMPANIES COLLECTION
    // =============================================
    match /companies/{companyId} {
      // Company data can be read by:
      // - Anyone (for public company info on job listings)
      // - Company members and admins for full details
      allow read: if true; // Public company info
      
      // Only company admins and platform admins can create/update companies
      allow create: if isAuthenticated() && (
        isAdmin() || 
        (isEmployer() && request.resource.data.createdBy == request.auth.uid)
      );
      
      allow update: if isAuthenticated() && (
        isAdmin() || 
        canAccessCompany(companyId)
      );
      
      // Only platform admins can delete companies
      allow delete: if isAdmin();
      
      // Company admins subcollection
      match /admins/{adminId} {
        allow read: if canAccessCompany(companyId);
        allow create: if isAuthenticated() && (
          isAdmin() || 
          isCompanyAdmin(companyId)
        );
        allow update: if isAuthenticated() && (
          isAdmin() || 
          isCompanyAdmin(companyId)
        );
        allow delete: if isAuthenticated() && (
          isAdmin() || 
          isCompanyAdmin(companyId)
        );
      }
      
      // Company employees/members
      match /members/{memberId} {
        allow read: if canAccessCompany(companyId);
        allow write: if isAuthenticated() && (
          isAdmin() || 
          isCompanyAdmin(companyId)
        );
      }
    }
    
    // =============================================
    // JOBS COLLECTION
    // =============================================
    match /jobs/{jobId} {
      // Jobs are publicly readable for browsing
      allow read: if true;
      
      // Only employers can create jobs, with quota limits
      allow create: if isAuthenticated() && isEmployer() && hasValidJobFields() && (
        // Enterprise employers have higher limits (implement quota checking in backend)
        isEnterprise() || 
        // Regular employers have standard limits
        (!isEnterprise())
      );
      
      // Only job owner company or admins can update
      allow update: if isAuthenticated() && (
        isAdmin() || 
        (isEmployer() && canAccessCompany(resource.data.companyId))
      );
      
      // Only admins can delete jobs (keep for audit trail)
      allow delete: if isAdmin();
    }
    
    // =============================================
    // JOB APPLICATIONS COLLECTION
    // =============================================
    match /applications/{applicationId} {
      // Job seekers can read their own applications
      // Employers can read applications for their jobs
      // Admins can read all
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isAdmin() ||
        (isEmployer() && canManageJobApplications(get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data))
      );
      
      // Only job seekers can create applications
      allow create: if isAuthenticated() && 
        isJobSeeker() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['jobId', 'userId', 'status', 'appliedAt']);
      
      // Job seekers can update their own applications (withdraw)
      // Employers can update status (review, shortlist, reject)
      allow update: if isAuthenticated() && (
        (isJobSeeker() && isOwner(resource.data.userId)) ||
        (isEmployer() && canManageJobApplications(get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data)) ||
        isAdmin()
      );
      
      // Only admins can delete applications (audit trail)
      allow delete: if isAdmin();
    }
    
    // =============================================
    // BOOKMARKS COLLECTION
    // =============================================
    match /bookmarks/{bookmarkId} {
      // Users can only access their own bookmarks
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        isJobSeeker();
    }
    
    // =============================================
    // AI RESPONSES CACHE
    // =============================================
    match /ai_responses/{responseId} {
      // Users can read cached responses for their own requests
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin()
      );
      
      // AI responses are typically created by backend services
      // Users can create for their own CV generation/analysis
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // No updates allowed - immutable cache
      // Auto-expire based on TTL in backend
      allow delete: if isAdmin();
    }
    
    // =============================================
    // CHAT SYSTEM
    // =============================================
    match /chats/{chatId} {
      // Participants can access the chat
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        isAdmin()
      );
      
      // Chat can be created by job seekers and employers
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants &&
        request.resource.data.participants.size() == 2;
      
      // Participants can update chat metadata
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        isAdmin()
      );
      
      // Messages subcollection
      match /messages/{messageId} {
        // Participants can read messages
        allow read: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants ||
          isAdmin()
        );
        
        // Participants can send messages
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.resource.data.senderId == request.auth.uid;
        
        // Messages are immutable (no updates/deletes for audit)
        // Only admins can delete for moderation
        allow delete: if isAdmin();
      }
    }
    
    // =============================================
    // NOTIFICATIONS
    // =============================================
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin()
      );
      
      // Notifications are typically created by backend/cloud functions
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Users can update to mark as read
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin()
      );
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin()
      );
    }
    
    // =============================================
    // FILE METADATA
    // =============================================
    match /files/{fileId} {
      // Users can read metadata for files they uploaded
      // Employers can read applicant file metadata
      allow read: if isAuthenticated() && (
        isOwner(resource.data.uploadedBy) ||
        isAdmin() ||
        // Employers can see file metadata when reviewing applications
        (isEmployer() && resource.data.visibility == 'application')
      );
      
      // Users can create file metadata for their uploads
      allow create: if isAuthenticated() && 
        request.resource.data.uploadedBy == request.auth.uid;
      
      // Only file owner or admin can update/delete
      allow update, delete: if isAuthenticated() && (
        isOwner(resource.data.uploadedBy) || 
        isAdmin()
      );
    }
    
    // =============================================
    // ADMIN COLLECTIONS
    // =============================================
    
    // Platform analytics (admin only)
    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }
    
    // Audit logs (admin only, immutable)
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      // No updates/deletes - immutable audit trail
    }
    
    // System configurations (admin only)
    match /config/{configId} {
      allow read, write: if isAdmin();
    }
    
    // POPIA compliance reports (admin only)
    match /compliance_reports/{reportId} {
      allow read, write: if isAdmin();
    }
    
    // Data processing logs for POPIA (admin only)
    match /data_processing_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      // Immutable compliance logs
    }
    
    // =============================================
    // CATCH-ALL DENY RULE
    // =============================================
    // Explicitly deny access to any collection not defined above
    match /{document=**} {
      allow read, write: if false;
    }
  }
}